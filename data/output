*** Fichier data/progr2.lea
*** //
*** // gestion des variables statiques
*** //
*** var
Stack PUSH
*** x
*** ,
*** y
*** :
*** integer
*** ;
*** b
Create class NodeList
Create class NodeId
Enregistre dans stack   x TypeInt_null
Create class NodeId
Enregistre dans stack   y TypeInt_null
Create class NodeList
*** :
*** boolean
*** ;
*** c
Create class NodeList
Create class NodeId
Enregistre dans stack   b TypeBoolean
*** :
*** string
*** ;
*** d
Create class NodeList
Create class NodeId
Enregistre dans stack   c TypeString
*** :
*** array
*** [
*** 1
*** ..
*** 10
*** ]
*** of
*** string
*** ;
*** begin
Create class NodeList
Create class NodeId
Enregistre dans stack   d TypeArray(TypeArrayRange[TypeInt_1..TypeInt_10], TypeString)
*** x
*** =
Retrouve dans stack   x TypeInt_null
Retrouve dans stack   x TypeInt_null
Retrouve dans stack   x TypeInt_null
Retrouve dans stack   x TypeInt_null
Retrouve dans stack   x TypeInt_null
Retrouve dans stack   x TypeInt_null
Create class NodeId
*** 1234564789
*** ;
Create class NodeLiteral
*** // 0x4995F6B5
*** y
Create class NodeAssign
Create class NodeList
*** =
Retrouve dans stack   y TypeInt_null
Retrouve dans stack   y TypeInt_null
Retrouve dans stack   y TypeInt_null
Retrouve dans stack   y TypeInt_null
Retrouve dans stack   y TypeInt_null
Retrouve dans stack   y TypeInt_null
Create class NodeId
*** 0x7FFFFFFF
*** ;
Create class NodeLiteral
*** b
Create class NodeAssign
*** =
Retrouve dans stack   b TypeBoolean
Retrouve dans stack   b TypeBoolean
Retrouve dans stack   b TypeBoolean
Retrouve dans stack   b TypeBoolean
Retrouve dans stack   b TypeBoolean
Retrouve dans stack   b TypeBoolean
Create class NodeId
*** true
*** ;
Create class NodeLiteral
*** c
Create class NodeAssign
*** =
Retrouve dans stack   c TypeString
Retrouve dans stack   c TypeString
Retrouve dans stack   c TypeString
Retrouve dans stack   c TypeString
Retrouve dans stack   c TypeString
Retrouve dans stack   c TypeString
Create class NodeId
*** "a"
*** ;
Create class NodeLiteral
*** d
Create class NodeAssign
*** [
Retrouve dans stack   d TypeArray(TypeArrayRange[TypeInt_1..TypeInt_10], TypeString)
Retrouve dans stack   d TypeArray(TypeArrayRange[TypeInt_1..TypeInt_10], TypeString)
Retrouve dans stack   d TypeArray(TypeArrayRange[TypeInt_1..TypeInt_10], TypeString)
Retrouve dans stack   d TypeArray(TypeArrayRange[TypeInt_1..TypeInt_10], TypeString)
Retrouve dans stack   d TypeArray(TypeArrayRange[TypeInt_1..TypeInt_10], TypeString)
Retrouve dans stack   d TypeArray(TypeArrayRange[TypeInt_1..TypeInt_10], TypeString)
Create class NodeId
*** 1
*** ]
Create class NodeLiteral
*** =
Create class NodeArrayAccess
*** "A"
*** ;
Create class NodeLiteral
*** d
Create class NodeAssign
*** [
Retrouve dans stack   d TypeArray(TypeArrayRange[TypeInt_1..TypeInt_10], TypeString)
Retrouve dans stack   d TypeArray(TypeArrayRange[TypeInt_1..TypeInt_10], TypeString)
Retrouve dans stack   d TypeArray(TypeArrayRange[TypeInt_1..TypeInt_10], TypeString)
Retrouve dans stack   d TypeArray(TypeArrayRange[TypeInt_1..TypeInt_10], TypeString)
Retrouve dans stack   d TypeArray(TypeArrayRange[TypeInt_1..TypeInt_10], TypeString)
Retrouve dans stack   d TypeArray(TypeArrayRange[TypeInt_1..TypeInt_10], TypeString)
Create class NodeId
*** 2
*** ]
Create class NodeLiteral
*** =
Create class NodeArrayAccess
*** "B"
*** ;
Create class NodeLiteral
*** d
Create class NodeAssign
*** [
Retrouve dans stack   d TypeArray(TypeArrayRange[TypeInt_1..TypeInt_10], TypeString)
Retrouve dans stack   d TypeArray(TypeArrayRange[TypeInt_1..TypeInt_10], TypeString)
Retrouve dans stack   d TypeArray(TypeArrayRange[TypeInt_1..TypeInt_10], TypeString)
Retrouve dans stack   d TypeArray(TypeArrayRange[TypeInt_1..TypeInt_10], TypeString)
Retrouve dans stack   d TypeArray(TypeArrayRange[TypeInt_1..TypeInt_10], TypeString)
Retrouve dans stack   d TypeArray(TypeArrayRange[TypeInt_1..TypeInt_10], TypeString)
Create class NodeId
*** 3
*** ]
Create class NodeLiteral
*** =
Create class NodeArrayAccess
*** "C"
*** ;
Create class NodeLiteral
*** d
Create class NodeAssign
*** [
Retrouve dans stack   d TypeArray(TypeArrayRange[TypeInt_1..TypeInt_10], TypeString)
Retrouve dans stack   d TypeArray(TypeArrayRange[TypeInt_1..TypeInt_10], TypeString)
Retrouve dans stack   d TypeArray(TypeArrayRange[TypeInt_1..TypeInt_10], TypeString)
Retrouve dans stack   d TypeArray(TypeArrayRange[TypeInt_1..TypeInt_10], TypeString)
Retrouve dans stack   d TypeArray(TypeArrayRange[TypeInt_1..TypeInt_10], TypeString)
Retrouve dans stack   d TypeArray(TypeArrayRange[TypeInt_1..TypeInt_10], TypeString)
Create class NodeId
*** 10
*** ]
Create class NodeLiteral
*** =
Create class NodeArrayAccess
*** "Z"
*** ;
Create class NodeLiteral
*** println
Create class NodeAssign
*** x
*** ;
Retrouve dans stack   x TypeInt_null
Retrouve dans stack   x TypeInt_null
Retrouve dans stack   x TypeInt_null
Retrouve dans stack   x TypeInt_null
Retrouve dans stack   x TypeInt_null
Retrouve dans stack   x TypeInt_null
Create class NodeId
*** println
Create class NodeList
Create class NodeCallFct
*** y
*** ;
Retrouve dans stack   y TypeInt_null
Retrouve dans stack   y TypeInt_null
Retrouve dans stack   y TypeInt_null
Retrouve dans stack   y TypeInt_null
Retrouve dans stack   y TypeInt_null
Retrouve dans stack   y TypeInt_null
Create class NodeId
*** println
Create class NodeList
Create class NodeCallFct
*** b
*** ;
Retrouve dans stack   b TypeBoolean
Retrouve dans stack   b TypeBoolean
Retrouve dans stack   b TypeBoolean
Retrouve dans stack   b TypeBoolean
Retrouve dans stack   b TypeBoolean
Retrouve dans stack   b TypeBoolean
Create class NodeId
*** println
Create class NodeList
Create class NodeCallFct
*** c
*** ;
Retrouve dans stack   c TypeString
Retrouve dans stack   c TypeString
Retrouve dans stack   c TypeString
Retrouve dans stack   c TypeString
Retrouve dans stack   c TypeString
Retrouve dans stack   c TypeString
Create class NodeId
*** println
Create class NodeList
Create class NodeCallFct
*** d
*** [
Retrouve dans stack   d TypeArray(TypeArrayRange[TypeInt_1..TypeInt_10], TypeString)
Retrouve dans stack   d TypeArray(TypeArrayRange[TypeInt_1..TypeInt_10], TypeString)
Retrouve dans stack   d TypeArray(TypeArrayRange[TypeInt_1..TypeInt_10], TypeString)
Retrouve dans stack   d TypeArray(TypeArrayRange[TypeInt_1..TypeInt_10], TypeString)
Retrouve dans stack   d TypeArray(TypeArrayRange[TypeInt_1..TypeInt_10], TypeString)
Retrouve dans stack   d TypeArray(TypeArrayRange[TypeInt_1..TypeInt_10], TypeString)
Create class NodeId
*** 2
*** ]
Create class NodeLiteral
*** ;
Create class NodeArrayAccess
*** end
Create class NodeList
Create class NodeCallFct

Stack PUSH
NodeList(NodeAssign(NodeId#x:TypeInt_null#, NodeLiteral#1234564789:TypeInt_1234564789#), NodeAssign(NodeId#y:TypeInt_null#, NodeLiteral#null:TypeInt_null#), NodeAssign(NodeId#b:TypeBoolean#, NodeLiteral#true:TypeBoolean#), NodeAssign(NodeId#c:TypeString#, NodeLiteral#"a":TypeString#), NodeAssign(NodeArrayAccess(NodeId#d:TypeArray(TypeArrayRange[TypeInt_1..TypeInt_10], TypeString)#, NodeLiteral#1:TypeInt_1#), NodeLiteral#"A":TypeString#), NodeAssign(NodeArrayAccess(NodeId#d:TypeArray(TypeArrayRange[TypeInt_1..TypeInt_10], TypeString)#, NodeLiteral#2:TypeInt_2#), NodeLiteral#"B":TypeString#), NodeAssign(NodeArrayAccess(NodeId#d:TypeArray(TypeArrayRange[TypeInt_1..TypeInt_10], TypeString)#, NodeLiteral#3:TypeInt_3#), NodeLiteral#"C":TypeString#), NodeAssign(NodeArrayAccess(NodeId#d:TypeArray(TypeArrayRange[TypeInt_1..TypeInt_10], TypeString)#, NodeLiteral#10:TypeInt_10#), NodeLiteral#"Z":TypeString#), println_NodeCallFct(NodeList(NodeId#x:TypeInt_null#)), println_NodeCallFct(NodeList(NodeId#y:TypeInt_null#)), println_NodeCallFct(NodeList(NodeId#b:TypeBoolean#)), println_NodeCallFct(NodeList(NodeId#c:TypeString#)), println_NodeCallFct(NodeList(NodeArrayAccess(NodeId#d:TypeArray(TypeArrayRange[TypeInt_1..TypeInt_10], TypeString)#, NodeLiteral#2:TypeInt_2#))))
--- CheckType NodeList
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
--- CheckType NodeLiteral
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
--- CheckType NodeLiteral
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
--- CheckType NodeLiteral
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
--- CheckType NodeLiteral
--- CheckType NodeCallFct
--- CheckType NodeId
--- CheckType NodeCallFct
--- CheckType NodeId
--- CheckType NodeCallFct
--- CheckType NodeId
--- CheckType NodeCallFct
--- CheckType NodeId
--- CheckType NodeCallFct
--- CheckType NodeArrayAccess
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
--- CheckType NodeId
Name ( LabelLocation(x) )
--- CheckType NodeLiteral
Move ( Mem ( Name ( LabelLocation(x) ) ), Const ( 1234564789 ) )
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
--- CheckType NodeId
Name ( LabelLocation(x) )
--- CheckType NodeLiteral
Move ( Mem ( Name ( LabelLocation(x) ) ), Const ( 1234564789 ) )
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
--- CheckType NodeId
Name ( LabelLocation(x) )
--- CheckType NodeLiteral
Move ( Mem ( Name ( LabelLocation(x) ) ), Const ( 1234564789 ) )
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
--- CheckType NodeId
Name ( LabelLocation(x) )
--- CheckType NodeLiteral
Move ( Mem ( Name ( LabelLocation(x) ) ), Const ( 1234564789 ) )
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
--- CheckType NodeId
Name ( LabelLocation(x) )
--- CheckType NodeLiteral
Move ( Mem ( Name ( LabelLocation(x) ) ), Const ( 1234564789 ) )
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
--- CheckType NodeId
Name ( LabelLocation(x) )
--- CheckType NodeLiteral
Move ( Mem ( Name ( LabelLocation(x) ) ), Const ( 1234564789 ) )
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
--- CheckType NodeId
Name ( LabelLocation(x) )
--- CheckType NodeLiteral
Move ( Mem ( Name ( LabelLocation(x) ) ), Const ( 1234564789 ) )
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
--- CheckType NodeId
Name ( LabelLocation(x) )
--- CheckType NodeLiteral
Move ( Mem ( Name ( LabelLocation(x) ) ), Const ( 1234564789 ) )
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
--- CheckType NodeId
Name ( LabelLocation(x) )
--- CheckType NodeLiteral
Move ( Mem ( Name ( LabelLocation(x) ) ), Const ( 1234564789 ) )
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
--- CheckType NodeId
Name ( LabelLocation(x) )
--- CheckType NodeLiteral
Move ( Mem ( Name ( LabelLocation(x) ) ), Const ( 1234564789 ) )
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
--- CheckType NodeId
Name ( LabelLocation(x) )
--- CheckType NodeLiteral
Move ( Mem ( Name ( LabelLocation(x) ) ), Const ( 1234564789 ) )
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
--- CheckType NodeId
Name ( LabelLocation(x) )
--- CheckType NodeLiteral
Move ( Mem ( Name ( LabelLocation(x) ) ), Const ( 1234564789 ) )
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
--- CheckType NodeId
Name ( LabelLocation(x) )
--- CheckType NodeLiteral
Move ( Mem ( Name ( LabelLocation(x) ) ), Const ( 1234564789 ) )
StmList ( Move ( Mem ( Name ( LabelLocation(x) ) ), Const ( 1234564789 ) ), Move ( Mem ( Name ( LabelLocation(x) ) ), Const ( 1234564789 ) ), Move ( Mem ( Name ( LabelLocation(x) ) ), Const ( 1234564789 ) ), Move ( Mem ( Name ( LabelLocation(x) ) ), Const ( 1234564789 ) ), Move ( Mem ( Name ( LabelLocation(x) ) ), Const ( 1234564789 ) ), Move ( Mem ( Name ( LabelLocation(x) ) ), Const ( 1234564789 ) ), Move ( Mem ( Name ( LabelLocation(x) ) ), Const ( 1234564789 ) ), Move ( Mem ( Name ( LabelLocation(x) ) ), Const ( 1234564789 ) ), Move ( Mem ( Name ( LabelLocation(x) ) ), Const ( 1234564789 ) ), Move ( Mem ( Name ( LabelLocation(x) ) ), Const ( 1234564789 ) ), Move ( Mem ( Name ( LabelLocation(x) ) ), Const ( 1234564789 ) ), Move ( Mem ( Name ( LabelLocation(x) ) ), Const ( 1234564789 ) ), Move ( Mem ( Name ( LabelLocation(x) ) ), Const ( 1234564789 ) ) )
*** Analyse syntaxique ok
--- CheckType NodeList
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
--- CheckType NodeLiteral
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
--- CheckType NodeLiteral
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
--- CheckType NodeLiteral
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
--- CheckType NodeLiteral
--- CheckType NodeCallFct
--- CheckType NodeId
--- CheckType NodeCallFct
--- CheckType NodeId
--- CheckType NodeCallFct
--- CheckType NodeId
--- CheckType NodeCallFct
--- CheckType NodeId
--- CheckType NodeCallFct
--- CheckType NodeArrayAccess
--- CheckType NodeList
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
--- CheckType NodeLiteral
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
--- CheckType NodeLiteral
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
--- CheckType NodeLiteral
--- CheckType NodeAssign
--- CheckType NodeArrayAccess
--- CheckType NodeLiteral
--- CheckType NodeCallFct
--- CheckType NodeId
--- CheckType NodeCallFct
--- CheckType NodeId
--- CheckType NodeCallFct
--- CheckType NodeId
--- CheckType NodeCallFct
--- CheckType NodeId
--- CheckType NodeCallFct
--- CheckType NodeArrayAccess
*** Typage correct
