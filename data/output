*** Fichier data/progr5.lea
*** var
Stack PUSH
*** x
*** :
*** integer
*** ;
*** function
Create class NodeList
Create class NodeId
Enregistre dans stack   x TypeInt_null
Create class NodeList
*** sum
*** (
*** i
*** :
*** integer
*** ,
Create class NodeId
Create class NodeList
*** j
*** :
*** integer
*** )
Create class NodeId
*** :
*** integer
*** var
Enregistre sum ([i:TypeInt_null], [j:TypeInt_null]) -> TypeInt_null Defined: false Name: sumDeclare : 0
Create class NodeCallFct
Stack PUSH
*** k
*** :
*** integer
*** ;
*** begin
Create class NodeList
Create class NodeId
Enregistre dans stack   k TypeInt_null
Create class NodeList
*** return
*** (
*** i
*** +
Create class NodeId
*** j
*** )
Create class NodeId
Create class NodeOp
*** ;
*** end
Create class NodeReturn
Create class NodeList
*** function
Stack PUSH
Retrouve2 sum ([i:TypeInt_null], [j:TypeInt_null]) -> TypeInt_null Defined: false Name: sumDeclare : 0
Enregistre sum ([i:TypeInt_null], [j:TypeInt_null]) -> TypeInt_null Defined: true Name: sumDeclare : 1
Create class NodeList
*** pgcd
*** (
*** i
*** :
*** integer
*** ,
Create class NodeId
Create class NodeList
*** j
*** :
*** integer
*** )
Create class NodeId
*** :
*** integer
*** begin
Enregistre pgcd ([i:TypeInt_null], [j:TypeInt_null]) -> TypeInt_null Defined: false Name: pgcdDeclare : 0
Create class NodeCallFct
Stack PUSH
*** while
*** (
*** i
*** !=
Create class NodeId
*** j
*** )
Create class NodeId
Create class NodeRel
*** do
*** if
*** (
*** i
*** >
Create class NodeId
*** j
*** )
Create class NodeId
Create class NodeRel
*** then
*** i
*** =
Create class NodeId
*** i
*** -
Create class NodeId
*** j
*** ;
Create class NodeId
Create class NodeOp
*** else
Create class NodeAssign
*** j
*** =
Create class NodeId
*** j
*** -
Create class NodeId
*** i
*** ;
Create class NodeId
Create class NodeOp
*** return
Create class NodeAssign
Create class NodeIf
Create class NodeWhile
Create class NodeList
*** (
*** i
*** )
Create class NodeId
*** ;
*** end
Create class NodeReturn
*** begin
Stack PUSH
Retrouve2 pgcd ([i:TypeInt_null], [j:TypeInt_null]) -> TypeInt_null Defined: false Name: pgcdDeclare : 0
Enregistre pgcd ([i:TypeInt_null], [j:TypeInt_null]) -> TypeInt_null Defined: true Name: pgcdDeclare : 1
*** x
*** =
Retrouve dans stack   x TypeInt_null
Retrouve dans stack   x TypeInt_null
Retrouve dans stack   x TypeInt_null
Retrouve dans stack   x TypeInt_null
Retrouve dans stack   x TypeInt_null
Create class NodeId
*** 5
*** ;
Create class NodeLiteral
*** x
Create class NodeAssign
Create class NodeList
*** =
Retrouve dans stack   x TypeInt_null
Retrouve dans stack   x TypeInt_null
Retrouve dans stack   x TypeInt_null
Retrouve dans stack   x TypeInt_null
Retrouve dans stack   x TypeInt_null
Create class NodeId
*** sum
*** (
*** 3
*** ,
Create class NodeLiteral
Create class NodeList
*** 5
*** )
Create class NodeLiteral
*** ;
Retrouve2 sum ([i:TypeInt_null], [j:TypeInt_null]) -> TypeInt_null Defined: true Name: sumDeclare : 1
Create class NodeCallFct
*** println
Create class NodeAssign
*** sum
*** (
*** 3
*** ,
Create class NodeLiteral
Create class NodeList
*** 5
*** )
Create class NodeLiteral
*** ;
Retrouve2 sum ([i:TypeInt_null], [j:TypeInt_null]) -> TypeInt_null Defined: true Name: sumDeclare : 1
Create class NodeCallFct
*** println
Create class NodeList
Create class NodeCallFct
*** (
*** pgcd
*** (
*** 78
*** ,
Create class NodeLiteral
Create class NodeList
*** 90
*** )
Create class NodeLiteral
*** )
Retrouve2 pgcd ([i:TypeInt_null], [j:TypeInt_null]) -> TypeInt_null Defined: true Name: pgcdDeclare : 1
Create class NodeCallFct
*** ;
*** end
Create class NodeList
Create class NodeCallFct

Stack PUSH
NodeList(NodeAssign(NodeId#x:TypeInt_null#, NodeLiteral#5:TypeInt_5#), NodeAssign(NodeId#x:TypeInt_null#, sum_NodeCallFct(NodeList(NodeLiteral#3:TypeInt_3#, NodeLiteral#5:TypeInt_5#))), println_NodeCallFct(NodeList(sum_NodeCallFct(NodeList(NodeLiteral#3:TypeInt_3#, NodeLiteral#5:TypeInt_5#)))), println_NodeCallFct(NodeList(pgcd_NodeCallFct(NodeList(NodeLiteral#78:TypeInt_78#, NodeLiteral#90:TypeInt_90#)))))
*** Analyse syntaxique ok
--- CheckType NodeList
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeCallFct
--- CheckType NodeLiteral
--- CheckType NodeLiteral
--- CheckType NodeCallFct
--- CheckType NodeCallFct
--- CheckType NodeLiteral
--- CheckType NodeLiteral
--- CheckType NodeCallFct
--- CheckType NodeCallFct
--- CheckType NodeLiteral
--- CheckType NodeLiteral
--- CheckType NodeList
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeCallFct
--- CheckType NodeLiteral
--- CheckType NodeLiteral
--- CheckType NodeCallFct
--- CheckType NodeCallFct
--- CheckType NodeLiteral
--- CheckType NodeLiteral
--- CheckType NodeCallFct
--- CheckType NodeCallFct
--- CheckType NodeLiteral
--- CheckType NodeLiteral
*** Typage correct
