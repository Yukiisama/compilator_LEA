*** Fichier data/progr1.lea
*** var
*** a
*** :
*** integer
*** ;
*** begin
*** a
*** =
Create class NodeId
*** 100
*** ;
Create class NodeLiteral
*** while
Create class NodeAssign
Create class NodeList
NodeList(NodeAssign(NodeId#a:TypeInt_1#, NodeLiteral#100:TypeInt_null#))
*** (
*** a
*** >=
Create class NodeId
*** 0
*** )
Create class NodeLiteral
Create class NodeOp
*** do
*** println
*** (
*** a
*** )
Create class NodeId
*** ;
*** a
Create class NodeList
Create class NodeCallFct
Create class NodeWhile
*** =
Create class NodeId
*** 1
*** ;
Create class NodeLiteral
*** if
Create class NodeAssign
*** (
*** a
*** ==
Create class NodeId
*** 0
*** )
Create class NodeLiteral
Create class NodeOp
*** then
*** return
*** 1
*** ;
Create class NodeLiteral
*** else
Create class NodeReturn
*** return
*** 0
*** ;
Create class NodeLiteral
*** end
Create class NodeReturn
Create class NodeIf

NodeList(NodeAssign(NodeId#a:TypeInt_1#, NodeLiteral#100:TypeInt_null#), NodeWhile(NodeOp(NodeId#a:TypeInt_1#, NodeLiteral#0:TypeInt_null#), println_NodeCallFct(NodeList(NodeId#a:TypeInt_1#))), NodeAssign(NodeId#a:TypeInt_1#, NodeLiteral#1:TypeInt_null#), NodeIf(NodeOp(NodeId#a:TypeInt_1#, NodeLiteral#0:TypeInt_null#), NodeReturn(NodeLiteral#1:TypeInt_null#), NodeReturn(NodeLiteral#0:TypeInt_null#)))
*** Analyse syntaxique ok
*** Fichier data/progr1.lea
*** var
*** a
*** :
*** integer
*** ;
*** begin
*** a
*** =
Create class NodeId
*** 100
*** ;
Create class NodeLiteral
*** while
Create class NodeAssign
Create class NodeList
NodeList(NodeAssign(NodeId#a:TypeInt_1#, NodeLiteral#100:TypeInt_null#))
*** (
*** a
*** >=
Create class NodeId
*** 0
*** )
Create class NodeLiteral
Create class NodeOp
*** do
*** println
*** (
*** a
*** )
Create class NodeId
*** ;
*** a
Create class NodeList
Create class NodeCallFct
Create class NodeWhile
*** =
Create class NodeId
*** 1
*** ;
Create class NodeLiteral
*** if
Create class NodeAssign
*** (
*** a
*** ==
Create class NodeId
*** 0
*** )
Create class NodeLiteral
Create class NodeOp
*** then
*** return
*** 1
*** ;
Create class NodeLiteral
*** else
Create class NodeReturn
*** return
*** 0
*** ;
Create class NodeLiteral
*** end
Create class NodeReturn
Create class NodeIf

NodeList(NodeAssign(NodeId#a:TypeInt_1#, NodeLiteral#100:TypeInt_null#), NodeWhile(NodeOp(NodeId#a:TypeInt_1#, NodeLiteral#0:TypeInt_null#), println_NodeCallFct(NodeList(NodeId#a:TypeInt_1#))), NodeAssign(NodeId#a:TypeInt_1#, NodeLiteral#1:TypeInt_null#), NodeIf(NodeOp(NodeId#a:TypeInt_1#, NodeLiteral#0:TypeInt_null#), NodeReturn(NodeLiteral#1:TypeInt_null#), NodeReturn(NodeLiteral#0:TypeInt_null#)))
*** Analyse syntaxique ok
--- CheckType NodeList
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
--- CheckType NodeWhile
--- CheckType NodeOp
--- CheckType NodeCallFct
--- CheckType NodeId
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
--- CheckType NodeIf
*** Typage correct
