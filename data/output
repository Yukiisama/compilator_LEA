*** Fichier data/progr5.lea
*** var
*** x
*** :
*** integer
*** ;
*** function
Enregistre x TypeInt_null
*** sum
*** (
*** i
*** :
*** integer
*** ,
*** j
*** :
*** integer
*** )
*** :
*** integer
*** var
*** k
*** :
*** integer
*** ;
*** begin
Enregistre k TypeInt_null
*** return
*** (
*** i
*** +
Retrouve i null
*** j
*** )
Retrouve j null
*** ;
*** end
*** function
*** pgcd
*** (
*** i
*** :
*** integer
*** ,
*** j
*** :
*** integer
*** )
*** :
*** integer
*** begin
*** while
*** (
*** i
*** !=
Retrouve i null
*** j
*** )
Retrouve j null
*** do
*** if
*** (
*** i
*** >
Retrouve i null
*** j
*** )
Retrouve j null
*** then
*** i
*** =
Retrouve i null
*** i
*** -
Retrouve i null
*** j
*** ;
Retrouve j null
*** else
*** j
*** =
Retrouve j null
*** j
*** -
Retrouve j null
*** i
*** ;
Retrouve i null
*** return
*** (
*** i
*** )
Retrouve i null
*** ;
*** end
*** begin
*** x
*** =
Retrouve x TypeInt_null
*** 5
*** ;
*** x
*** =
Retrouve x TypeInt_null
*** sum
*** (
*** 3
*** ,
*** 5
*** )
*** ;
*** println
*** sum
*** (
*** 3
*** ,
*** 5
*** )
*** ;
*** println
*** (
*** pgcd
*** (
*** 78
*** ,
*** 90
*** )
*** )
*** ;
*** end

NodeList(NodeAssign(NodeId#x:TypeInt_null#, NodeLiteral#5:TypeInt_null#), NodeAssign(NodeId#x:TypeInt_null#, sum_NodeCallFct(NodeList(NodeLiteral#3:TypeInt_null#, NodeLiteral#5:TypeInt_null#))), println_NodeCallFct(NodeList(sum_NodeCallFct(NodeList(NodeLiteral#3:TypeInt_null#, NodeLiteral#5:TypeInt_null#)))), println_NodeCallFct(NodeList(pgcd_NodeCallFct(NodeList(NodeLiteral#78:TypeInt_null#, NodeLiteral#90:TypeInt_null#)))))
*** Analyse syntaxique ok
--- CheckType NodeList
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeCallFct
*** Erreur de typage: pas le même nombre de paramètres 
*** Erreur de typage
