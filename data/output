*** Fichier data/progr4.lea
*** //
*** // Structure de contr√¥le
*** //
*** //
*** var
Stack PUSH
*** x
*** ,
*** y
*** :
*** integer
*** ;
*** begin
Create class NodeList
Create class NodeId
Enregistre dans stack   x TypeInt_null
Create class NodeId
Enregistre dans stack   y TypeInt_null
Create class NodeList
*** x
*** =
Retrouve dans stack   x TypeInt_null
Retrouve dans stack   x TypeInt_null
Retrouve dans stack   x TypeInt_null
Retrouve dans stack   x TypeInt_null
Retrouve dans stack   x TypeInt_null
Create class NodeId
*** 1
*** ;
Create class NodeLiteral
*** while
Create class NodeAssign
Create class NodeList
*** (
*** x
*** <=
Retrouve dans stack   x TypeInt_null
Retrouve dans stack   x TypeInt_null
Retrouve dans stack   x TypeInt_null
Retrouve dans stack   x TypeInt_null
Retrouve dans stack   x TypeInt_null
Create class NodeId
*** 10
*** )
Create class NodeLiteral
Create class NodeRel
*** do
*** begin
Stack PUSH
*** println
*** (
*** x
*** )
Retrouve dans stack   x TypeInt_null
Retrouve dans stack   x TypeInt_null
Retrouve dans stack   x TypeInt_null
Retrouve dans stack   x TypeInt_null
Retrouve dans stack   x TypeInt_null
Create class NodeId
*** ;
*** if
Create class NodeList
Create class NodeCallFct
Create class NodeList
*** (
*** x
*** ==
Retrouve dans stack   x TypeInt_null
Retrouve dans stack   x TypeInt_null
Retrouve dans stack   x TypeInt_null
Retrouve dans stack   x TypeInt_null
Retrouve dans stack   x TypeInt_null
Create class NodeId
*** 10
*** )
Create class NodeLiteral
Create class NodeRel
*** then
*** begin
Stack PUSH
*** y
*** =
Retrouve dans stack   y TypeInt_null
Retrouve dans stack   y TypeInt_null
Retrouve dans stack   y TypeInt_null
Retrouve dans stack   y TypeInt_null
Retrouve dans stack   y TypeInt_null
Create class NodeId
*** 1
*** ;
Create class NodeLiteral
*** while
Create class NodeAssign
Create class NodeList
*** (
*** y
*** <=
Retrouve dans stack   y TypeInt_null
Retrouve dans stack   y TypeInt_null
Retrouve dans stack   y TypeInt_null
Retrouve dans stack   y TypeInt_null
Retrouve dans stack   y TypeInt_null
Create class NodeId
*** 5
*** )
Create class NodeLiteral
Create class NodeRel
*** do
*** begin
Stack PUSH
*** println
*** (
*** -
*** 1000
*** -
Create class NodeLiteral
Create class NodeOp
*** y
*** )
Retrouve dans stack   y TypeInt_null
Retrouve dans stack   y TypeInt_null
Retrouve dans stack   y TypeInt_null
Retrouve dans stack   y TypeInt_null
Retrouve dans stack   y TypeInt_null
Create class NodeId
Create class NodeOp
*** ;
*** y
Create class NodeList
Create class NodeCallFct
Create class NodeList
*** =
Retrouve dans stack   y TypeInt_null
Retrouve dans stack   y TypeInt_null
Retrouve dans stack   y TypeInt_null
Retrouve dans stack   y TypeInt_null
Retrouve dans stack   y TypeInt_null
Create class NodeId
*** y
*** +
Retrouve dans stack   y TypeInt_null
Retrouve dans stack   y TypeInt_null
Retrouve dans stack   y TypeInt_null
Retrouve dans stack   y TypeInt_null
Retrouve dans stack   y TypeInt_null
Create class NodeId
*** 1
*** ;
Create class NodeLiteral
Create class NodeOp
*** end
Create class NodeAssign
*** end
Stack PUSH
Create class NodeWhile
While ici NodeWhile(NodeRel(NodeId#y:TypeInt_null#, NodeLiteral#5:TypeInt_5#), NodeList(println_NodeCallFct(NodeList(NodeOp(NodeOp(NodeLiteral#1000:TypeInt_1000#), NodeId#y:TypeInt_null#))), NodeAssign(NodeId#y:TypeInt_null#, NodeOp(NodeId#y:TypeInt_null#, NodeLiteral#1:TypeInt_1#))))
*** else
Stack PUSH
*** println
*** (
*** "X"
*** )
Create class NodeLiteral
*** ;
*** x
Create class NodeList
Create class NodeCallFct
Create class NodeIf
*** =
Retrouve dans stack   x TypeInt_null
Retrouve dans stack   x TypeInt_null
Retrouve dans stack   x TypeInt_null
Retrouve dans stack   x TypeInt_null
Retrouve dans stack   x TypeInt_null
Create class NodeId
*** x
*** +
Retrouve dans stack   x TypeInt_null
Retrouve dans stack   x TypeInt_null
Retrouve dans stack   x TypeInt_null
Retrouve dans stack   x TypeInt_null
Retrouve dans stack   x TypeInt_null
Create class NodeId
*** 1
*** ;
Create class NodeLiteral
Create class NodeOp
*** end
Create class NodeAssign
*** end
Stack PUSH
Create class NodeWhile
While ici NodeWhile(NodeRel(NodeId#x:TypeInt_null#, NodeLiteral#10:TypeInt_10#), NodeList(println_NodeCallFct(NodeList(NodeId#x:TypeInt_null#)), NodeIf(NodeRel(NodeId#x:TypeInt_null#, NodeLiteral#10:TypeInt_10#), NodeList(NodeAssign(NodeId#y:TypeInt_null#, NodeLiteral#1:TypeInt_1#), NodeWhile(NodeRel(NodeId#y:TypeInt_null#, NodeLiteral#5:TypeInt_5#), NodeList(println_NodeCallFct(NodeList(NodeOp(NodeOp(NodeLiteral#1000:TypeInt_1000#), NodeId#y:TypeInt_null#))), NodeAssign(NodeId#y:TypeInt_null#, NodeOp(NodeId#y:TypeInt_null#, NodeLiteral#1:TypeInt_1#))))), println_NodeCallFct(NodeList(NodeLiteral#"X":TypeString#))), NodeAssign(NodeId#x:TypeInt_null#, NodeOp(NodeId#x:TypeInt_null#, NodeLiteral#1:TypeInt_1#))))

Stack PUSH
NodeList(NodeAssign(NodeId#x:TypeInt_null#, NodeLiteral#1:TypeInt_1#), NodeWhile(NodeRel(NodeId#x:TypeInt_null#, NodeLiteral#10:TypeInt_10#), NodeList(println_NodeCallFct(NodeList(NodeId#x:TypeInt_null#)), NodeIf(NodeRel(NodeId#x:TypeInt_null#, NodeLiteral#10:TypeInt_10#), NodeList(NodeAssign(NodeId#y:TypeInt_null#, NodeLiteral#1:TypeInt_1#), NodeWhile(NodeRel(NodeId#y:TypeInt_null#, NodeLiteral#5:TypeInt_5#), NodeList(println_NodeCallFct(NodeList(NodeOp(NodeOp(NodeLiteral#1000:TypeInt_1000#), NodeId#y:TypeInt_null#))), NodeAssign(NodeId#y:TypeInt_null#, NodeOp(NodeId#y:TypeInt_null#, NodeLiteral#1:TypeInt_1#))))), println_NodeCallFct(NodeList(NodeLiteral#"X":TypeString#))), NodeAssign(NodeId#x:TypeInt_null#, NodeOp(NodeId#x:TypeInt_null#, NodeLiteral#1:TypeInt_1#)))))
--- CheckType NodeList
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
--- CheckType NodeWhile
--- CheckType NodeRel
--- CheckType NodeList
--- CheckType NodeCallFct
--- CheckType NodeId
--- CheckType NodeIf
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeOp
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
--- CheckType NodeId
Name ( LabelLocation(x) )
--- CheckType NodeLiteral
NodeAssign =>Move ( Mem ( Name ( LabelLocation(x) ) ), Const ( 1 ) )
--- CheckType NodeWhile
--- CheckType NodeRel
--- CheckType NodeList
--- CheckType NodeCallFct
--- CheckType NodeId
--- CheckType NodeIf
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeOp
CI : NodeWhile
--- CheckType NodeRel
--- CheckType NodeId
Name ( LabelLocation(x) )
--- CheckType NodeLiteral
Relop ( LE, Name ( LabelLocation(x) ), Const ( 10 ) )
--- CheckType NodeList
--- CheckType NodeCallFct
--- CheckType NodeId
--- CheckType NodeIf
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeOp
--- CheckType NodeCallFct
--- CheckType NodeId
--- CheckType NodeId
Name ( LabelLocation(x) )
Callfct =>Call( Name ( LabelLocation(println) ), ExpList ( Name ( LabelLocation(x) ) ) )
--- CheckType NodeIf
--- CheckType NodeRel
--- CheckType NodeId
Name ( LabelLocation(x) )
--- CheckType NodeLiteral
Relop ( EQ, Name ( LabelLocation(x) ), Const ( 10 ) )
--- CheckType NodeList
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
--- CheckType NodeWhile
--- CheckType NodeRel
--- CheckType NodeList
--- CheckType NodeCallFct
--- CheckType NodeOp
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeOp
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeLiteral
--- CheckType NodeId
Name ( LabelLocation(y) )
--- CheckType NodeLiteral
NodeAssign =>Move ( Mem ( Name ( LabelLocation(y) ) ), Const ( 1 ) )
--- CheckType NodeWhile
--- CheckType NodeRel
--- CheckType NodeList
--- CheckType NodeCallFct
--- CheckType NodeOp
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeOp
CI : NodeWhile
--- CheckType NodeRel
--- CheckType NodeId
Name ( LabelLocation(y) )
--- CheckType NodeLiteral
Relop ( LE, Name ( LabelLocation(y) ), Const ( 5 ) )
--- CheckType NodeList
--- CheckType NodeCallFct
--- CheckType NodeOp
--- CheckType NodeAssign
--- CheckType NodeId
--- CheckType NodeOp
--- CheckType NodeCallFct
--- CheckType NodeOp
--- CheckType NodeOp
--- CheckType NodeOp
--- CheckType NodeLiteral
