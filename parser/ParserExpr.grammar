%package "ubordeaux.deptinfo.compilation.project.main";
%class "ParserExpr";
%import "ubordeaux.deptinfo.compilation.project.main.*";
%import "ubordeaux.deptinfo.compilation.project.node.*";
%import "ubordeaux.deptinfo.compilation.project.type.*";
%import "ubordeaux.deptinfo.compilation.project.environment.*";
%import "java.util.ArrayList";
%import "java.util.Iterator";


%embed {: 
	static class Events extends beaver.Parser.Events {
		public void syntaxError(Symbol token) {
			System.err.format("*** Erreur de syntaxe en ligne %d, colonne %d. Token inattendu: %s\n",
				Symbol.getLine(token.getStart()),
				Symbol.getColumn(token.getStart()),
				Terminals.NAMES[token.getId()]);
		}
	}
	
	public void semanticError(String msg, Symbol token) {
			System.err.format("*** " + msg + " ligne %d, colonne %d\n",
				Symbol.getLine(token.getStart()),
				Symbol.getColumn(token.getStart()));
		}
		
	private Environment typeEnvironment = new Environment("types");
	private Environment procedureEnvironment = new Environment("procedures");
	private StackEnvironment stackEnvironment = new StackEnvironment("local variables stack");
	private String type_declaration_name;
	
	
:};

%init {: 
	report = new Events();
:};

/////////////////////////////////////////
////////////    TERMINALS    ////////////
/////////////////////////////////////////

%terminals BEGIN, END, TYPE, STR, INT, BOOL, DOUBLE_DOT;
%terminals ARRAY, LBRACKET, RBRACKET, OF, CIRCUMFLEX;
%terminals STRUCT, LCURLY_BRACKET, RCURLY_BRACKET, COLON;
%terminals PROCEDURE, FUNCTION, LPAR, RPAR, VAR;
%terminals NEW, DISPOSE, PRINT,PRINTLN, READLN, RETURN;
%terminals IF, THEN, ELSE, WHILE;
%terminals DO, SWITCH, CASE, DEFAULT;
%terminals PLUS, MINUS, TIMES, DIV;
%terminals OR, AND, INFERIOR, INFERIOR_EQ, SUPERIOR;
%terminals SUPERIOR_EQ, EQUALS, DIFF, TRUE, FALSE, NULL;
%terminals SEMI, EQ, COMMA, NOT;
%terminals IDENTIFIER, INTEGER_LIT, STRING_LIT;

//////////////////////////
////    LEFT/RIGHT    ////
//////////////////////////

%right UNARY_MINUS, CIRCUMFLEX, NOT, IF, THEN, ELSE;
%left TIMES, DIV, PLUS, MINUS;
%left OR, AND, INFERIOR, INFERIOR_EQ, SUPERIOR, SUPERIOR_EQ, EQUALS, DIFF;

/////////////////////
////   TYPEOF    ////
/////////////////////


////====Node====\\\\

%typeof statement = "Node";
%typeof structured_statement = "Node";
%typeof simple_statement = "Node";
%typeof statement_list = "Node";
%typeof argt = "Node";
%typeof procedure_definition = "Node";
%typeof procedure_expression = "Node";
%typeof case_default = "NodeCase";

////====NodeExp====\\\\

%typeof variable_access = "NodeExp";
%typeof expression = "NodeExp";

////====Integer/String====\\\\

%typeof INTEGER_LIT = "Integer";
%typeof init_enumerated_type = "TypeEnumRange";
%typeof STRING_LIT = "String";
%typeof IDENTIFIER = "String";

////====Literal====\\\\

%typeof literal = "NodeLiteral";

////====TYPE====\\\\
%typeof type_declaration_head = "TypeNamed";
%typeof type_declaration = "Type";
%typeof type_declaration_part, type = "Type";
%typeof index_type = "Type";
%typeof range_type = "Type";
%typeof subrange_type = "Type";
%typeof variable_declaration_part = "Type";
%typeof feature_type = "TypeFeature";

////====LIST====\\\\

%typeof type_declaration_list = "TypeList";
%typeof variable_declaration, variable_declaration_list = "NodeList";
%typeof case_statement = "NodeList";
%typeof expression_part = "NodeList";
%typeof expression_list = "NodeList";
%typeof argt_list = "NodeList";
%typeof feature_list_type = "TypeFeatureList";
%typeof case_statement_list = "NodeCaseList";
%typeof identifier_list = "IdentifierList";
%typeof procedure_definition_list = "NodeList";


///////////////////////////////////////
///////////    PROGRAMME    ///////////
///////////////////////////////////////

%goal program;

program =
	push_stack
	type_declaration_part		
	variable_declaration_part		
	procedure_definition_part		
	BEGIN
	statement_list.l
	END
	pop_stack
	{: 
		return l;
	:}
	;
///////////////////////////////////////
////////	UTILITIES STACK   ////////
/////////////////////////////////////
	push_stack = {: stackEnvironment.push_stack(); return new Symbol(0); :}
	;
	pop_stack =  {: stackEnvironment.pop_stack();  return new Symbol(0); :}
	;
////////////////////////////////////////////////
//////    DECLARATION DES TYPES NOMMES    //////
////////////////////////////////////////////////

type_declaration_part =
	/* empty */
	|TYPE type_declaration_list
	;

type_declaration_list =
	type_declaration_list.list type_declaration.t		{: list.add(t); return list; :}
	| type_declaration.t								{: TypeList list = new TypeList(t);  return list; :}
	;

type_declaration =
	type_declaration_head.name EQ type.t SEMI			
	{:
		if(!t.equals(new TypeInt()) && !t.equals(new TypeBoolean()) 
				&& !t.equals(new TypeString())) {
				if(t instanceof TypeNamed) {
					
					//We want to check if the TypeNamed exists.
					if(typeEnvironment.getVariableValue(((TypeNamed)t).get_name())==null) {
						semanticError("Error : Named type assigned doesn't exist " + name + ": " + t,t);
						System.err.println("ERROR :Named type assigned doesn't exist  " + name + ": " + t);
						Main.add_error_type(new String("ERROR Type declaration : Named type assigned doesn't exist  "+ name + ": " + t ));
					}
				}
		}
		typeEnvironment.putVariable(name.get_name(),t);
		
		//Enum case register the name of the enumeration into his members as 3rd argument
		TypeEnumRange enu = null;
		if (t instanceof TypeEnumRange) {
			enu = (TypeEnumRange) t;
			int i = 0 ;
			for(String s : enu.getList()) {
				typeEnvironment.put_enum_value(s,new TypeItemEnum(i,s,name.get_name()));
				stackEnvironment.putVariable(s,new TypeItemEnum(i,s,name.get_name()));
				i++;
			}
		}

		return new TypeFeature(name.get_name(),t);
	:}	
	;
	
type_declaration_head =
	IDENTIFIER.name 									{: return new TypeNamed(name); :}
	;

////////////////////////////////////////
//////    DEFINITION DES TYPES    //////
////////////////////////////////////////

type=
	simple_type
	| named_type
	| index_type
	| array_type
	| pointer_type
	| structure_type
	;

simple_type =
	STR						{: return new TypeString(); :}
	| INT					{: return new TypeInt(); :}
	| BOOL					{: return new TypeBoolean(); :}
	;

named_type =
	IDENTIFIER.name			{: return new TypeNamed(name); :}
	;

index_type =
	enumerated_type
	| subrange_type
	;

enumerated_type =
	init_enumerated_type.init LPAR identifier_list.t_list RPAR
		{: 
			TypeEnumRange enum_range = new TypeEnumRange(new TypeItemEnum(0,t_list.first()),new TypeItemEnum(t_list.size()-1,t_list.last()));
			Iterator<String> it = t_list.iterator();
			int i = 0;
			//Register all ItemEnum 
			while(it.hasNext()) {
				String x =  it.next();
				typeEnvironment.put_enum_value(x,new TypeItemEnum(i,x));
				stackEnvironment.putVariable(x,new TypeItemEnum(i,x));
				//List of name for later use 
				enum_range.setListName(i,x);
				i++;
			}
			return enum_range;
		:}
	;
	
init_enumerated_type = {:return new TypeEnumRange();:}
	;

subrange_type =
	INTEGER_LIT.min DOUBLE_DOT INTEGER_LIT.max	
	{: 
		boolean test_range_type = true;
		if(min > max) {
			Main.add_error_type(new String("ERROR TypeArrayRange : range not valid " + min + " > " + max));
			test_range_type = false;
		}
		TypeArrayRange type_range = new TypeArrayRange(new TypeInt(min), new TypeInt(max));
		type_range.setFrom_enum(false);
		return type_range;
	:}

	| IDENTIFIER.min DOUBLE_DOT IDENTIFIER.max				
	{: 
		boolean test_range_type = true;
		TypeItemEnum x = typeEnvironment.get_enum_value(min);
		TypeItemEnum y = typeEnvironment.get_enum_value(max);
		
		//Case ItemEnum doesn't exist
		if(x==null || y ==null) {
			Main.add_error_type(new String("ERROR ItemEnum : enum don't exist "));
			return new TypeArrayRange(new TypeInt(-1), new TypeInt(-1));
		}
		//We get the values for the typeArrayRange
		int v_min = x.getValue();
		int v_max = y.getValue();
		if(v_min > v_max) {
			Main.add_error_type(new String("ERROR TypeArrayRange : range not valid " + v_min + " > " + v_max));
			test_range_type = false;
		}
		//Incoherent range (not from the same Enum)
		if(x.getEnum_name()!= y.getEnum_name()){
			semanticError("Error TypeArrayRange : incoherent range " + x + " : " + y,x);
			System.err.println("ERROR TypeArrayRange : incoherent range   " + x + " : " + y);
			Main.add_error_type(new String("ERROR TypeArrayRange : incoherent range " + x + " : " + y));
		}
		
		TypeArrayRange one = new TypeArrayRange(new TypeInt(v_min), new TypeInt(v_max));
		//Range is an enumeration 
		one.setFrom_enum(true);
		return one; 
	:}
	;

array_type =
	ARRAY LBRACKET range_type.t1 RBRACKET OF type.t2	
	{:

		TypeArray array = new TypeArray(t1,t2);
		if(t1 instanceof TypeNamed) {
			if(typeEnvironment.getVariableValue(((TypeNamed)t1).get_name())==null)
				Main.add_error_type(new String("ERROR TypeArray : range type expected " + t1 + "   " + t2));
			else 
				array = new TypeArray(typeEnvironment.getVariableValue(((TypeNamed)t1).get_name()),t2);
				
		}
		return array; 
	:}
	;

range_type =
	enumerated_type
	| subrange_type
	| named_type 
	;

pointer_type =
	CIRCUMFLEX type.t											{: return new TypePointer(t); :}
	;

structure_type =
	STRUCT LCURLY_BRACKET feature_list_type.t RCURLY_BRACKET	{: return new TypeStruct(t); :}
	;

feature_list_type =
	feature_list_type.list feature_type.t						{: list.add(t); return list; :}
	| feature_type.t											{: TypeFeatureList list = new TypeFeatureList(); list.add(t); return list; :}
	;
	

feature_type =
	IDENTIFIER.id COLON type.t SEMI								{: return new TypeFeature(id, t); :}
	;

//////////////////////////////////////////////////////
///////    DECLARATION DES VARIABLES TYPEES    ///////
//////////////////////////////////////////////////////

variable_declaration_part =
	/* empty */ 
	| VAR variable_declaration_list
	;

variable_declaration_list=
	variable_declaration_list.list variable_declaration.name	{: list.add(name); return list; :}
	| variable_declaration.name									{: NodeList list = new NodeList(); list.add(name); return list; :}
	;

variable_declaration =
	identifier_list.list COLON type.t SEMI 
		{: 
		NodeList list_2 = new NodeList();
		Iterator<String> it = list.iterator();
		while(it.hasNext()) {
			String x =  it.next();
			
			list_2.add(new NodeId(x,t));
			//If variable is already declared
			if(stackEnvironment.getVariableValue(x)!=null) {
				semanticError("Error VARIABLE Declaration : Variable x yet declared " + x ,list);
				System.err.println("ERROR VARIABLE Declaration  : Variable x yet declared  " + x );
				Main.add_error_type(new String("ERROR VARIABLE Declaration  : Variable x yet declared  " + x));
			}
			else
				stackEnvironment.putVariable(x,t);
		}
		return list_2; 
		:}
	;
		

identifier_list =
	identifier_list.list COMMA IDENTIFIER.name				{: list.add(name); return list; :}
	| IDENTIFIER.name										{: IdentifierList list = new IdentifierList(); list.add(name); return list; :}
	;

/////////////////////////////////////////////////////////////
//DECLARATION ET DEFINITION DES PROCEDURES ET DES FONCTIONS//
/////////////////////////////////////////////////////////////

procedure_definition_part =
	| procedure_definition_list
	;

procedure_definition_list =
	procedure_definition_list.list procedure_definition.func 			{: list.add(func); return list; :}
	| procedure_definition.func											{: NodeList list = new NodeList(); list.add(func); return list; :}
	;

procedure_definition =
	procedure_definition_head.s block
	{:
		NodeCallFct sa = (NodeCallFct)s;
		TypeFunct t = (TypeFunct) sa.getTypeFUNC();
		TypeFunct t2 = (TypeFunct) procedureEnvironment.getFunction(sa.getName());
		
		if(t2.getDefined()==false) {
			t.setDefined(true);
			t.setDeclared(1);
		}
		else {
			semanticError(" function already defined  ",s);
			System.err.println("ERROR :function already defined  " + sa );
			Main.add_error_type(new String("ERROR NodeCallFct : function already defined  " + sa ));
			
		}
		//Set the new information about definition of function into the nodeCallFct
		sa.setTypeFUNC(t);
		procedureEnvironment.putFunction(sa.getName(),sa.getTypeFUNC());
		
		return sa;
	:}
	| procedure_definition_head.s SEMI 
	{:
		NodeCallFct sa = (NodeCallFct)s;
		TypeFunct t = (TypeFunct) sa.getTypeFUNC();
		TypeFunct t2 = (TypeFunct) procedureEnvironment.getFunction(sa.getName());
		//Must be only declared once
		int x = t2.getDeclared();
		t.setDeclared(++x);
		if(t.getDeclared()>1) {
			semanticError(" procedure or function declared twice  ",s);
			System.err.println("ERROR :procedure or function declared twice  " + sa );
			Main.add_error_type(new String("ERROR NodeCallFct : procedure or function declared twice  " + sa ));
		}
		//Set the new information about declaration of function into the nodeCallFct
		sa.setTypeFUNC(t);
		procedureEnvironment.putFunction(sa.getName(),sa.getTypeFUNC());
		
		return sa;
	:}
	
	;

procedure_definition_head =
	procedure_head 
	;

procedure_head =
	PROCEDURE IDENTIFIER.func LPAR argt_part.list RPAR					
	{: 
		
		TypeTuple lionel = new TypeTuple();
		Iterator<Node> it = list.iterator();
		while(it.hasNext()) {
			NodeId x = (NodeId) it.next();		
			lionel.add( new TypeFeature(func,x.getType()));
			stackEnvironment.putVariable(x.getName(),x.getType());
		}

		TypeFunct lionel_le_boss = new TypeFunct(func, lionel, new TypeVoid());
		procedureEnvironment.putFunction(func,lionel_le_boss);
		
		return new NodeCallFct(func,new TypeFunct(func, lionel, new TypeVoid()), list); 
	:}

	| FUNCTION IDENTIFIER.func LPAR argt_part.list RPAR COLON type.t	
	{: 
		
		TypeTuple lionel = new TypeTuple();
		Iterator<Node> it = list.iterator();
		while(it.hasNext()) {
			NodeId x = (NodeId) it.next();	
			lionel.add( new TypeFeature(func,x.getType()));
			stackEnvironment.putVariable(x.getName(),x.getType());
		}

		TypeFunct lionel_le_boss = new TypeFunct(func, lionel, t);
		if(procedureEnvironment.is_null(func))
			procedureEnvironment.putFunction(func,lionel_le_boss);

		return new NodeCallFct(func,new TypeFunct(func, lionel, t), list); 
	:}
	;

argt_part =
	/* empty */ 
	| argt_list
	;

argt_list =
	argt_list.list COMMA argt.arg			{: list.add(arg); return list; :}
	| argt.arg								{: NodeList list = new NodeList(); list.add(arg); return list; :}
	;

argt =
	IDENTIFIER.name COLON type.t			{: return new NodeId(name, t); :}
	;

////////////////////////////////////////////
///////////////    BLOCS    ////////////////
////////////////////////////////////////////

block=
	push_stack
	variable_declaration_part
	BEGIN
	statement_list.l
	END
	pop_stack
	{:
		return l;
	:}
	;

////////////////////////////
////    INSTRUCTIONS    ////
////////////////////////////

statement_list=
	statement_list.list statement.stm		{: list.add(stm); return list; :}
	| statement.stm							{: NodeList list = new NodeList(); list.add(stm); return list; :}
	;

statement=
	simple_statement
	| structured_statement
	;

simple_statement=
	assignment_statement
	| procedure_statement
	| new_statement
	| dispose_statement
	| print_statement
	| println_statement
	| readln_statement
	| return_statement
	;

assignment_statement=
	variable_access.stm EQ expression.e SEMI	
	{: 	
		
		TypeArray tab = null;
		TypeArray tab2 = null;
		if(stm.getType() instanceof TypeArray && e.getType() instanceof TypeArray) {
			tab = (TypeArray) stm.getType();
			tab2 = (TypeArray) e.getType();
		}
		
		if(stm.getType() instanceof TypeArray && !(e.getType() instanceof TypeArray)){
			semanticError(" Accessible variable expected", stm);
			System.err.println(new String("ERROR  :  Accessible variable expected " + stm.getType() + "  : " + stm.getType()));
			Main.add_error_type(new String("ERROR NodeAssign:  Accessible variable expected " + stm.getType() + "  : " + stm.getType()));	
		}
		
		else if(stm.getType() instanceof TypeArray && e.getType() instanceof TypeArray
			&&(((TypeArrayRange)tab.getRangeOREnum()).getFirst()!= ((TypeArrayRange)tab2.getRangeOREnum()).getFirst())
			&&(((TypeArrayRange)tab.getRangeOREnum()).getLast()!= ((TypeArrayRange)tab2.getRangeOREnum()).getLast())){
			
			semanticError(" ERROR  : Type error in affectation", stm);
			System.err.println(new String("ERROR  : Type error in affectation (i.e range not same) " + stm.getType() + "  : " + stm.getType()));
			Main.add_error_type(new String("ERROR  : Type error in affectation  ( i.e range not same) " + stm.getType() + "  : " + stm.getType()));
		}
		
		else if(stm.getType()!=null && e.getType()!=null && !stm.getType().equals(e.getType())){
			if(stm.getType() instanceof TypeNamed){
				Type t = typeEnvironment.getVariableValue(((TypeNamed)stm.getType()).get_name());
				if(t instanceof TypePointer ) {
					return new NodeAssign(stm, e);
				}
			}
			else {	
				if(stm.getType() instanceof TypePointer && e.getType() instanceof TypePointer ) {
					TypeComplex ptr = (TypeComplex)e.getType();
					if(ptr.size()==0)
						return new NodeAssign(stm, new NodeLiteral((new TypePointer((TypePointer) stm.getType()).get(0)),0));
					else if(ptr.size()==1)
						return new NodeAssign(stm, new NodeLiteral((new TypePointer((TypePointer) e.getType()).get(0)),0));
				}
				semanticError("Type error in affectation", e);
				System.err.println(new String("ERROR  : Type error in affectation " + stm.getType() + "  : " + e.getType()));
				Main.add_error_type(new String("ERROR NodeAssign: Type error in affectation " + stm.getType() + "  : " + e.getType()));
			}
		}
	
		return new NodeAssign(stm, e);
	:}
	;

procedure_statement=
	procedure_expression.e SEMI {:return e;:}
	;

procedure_expression=
	IDENTIFIER.func LPAR expression_part.list RPAR	
	{: 	
		TypeFunct lionel_le_boss = (TypeFunct)procedureEnvironment.getFunction(func);
		//Case Nb params differents
		if(lionel_le_boss.getParams().size() != list.size()) {
			semanticError("Type error in calling expression",list);
			System.err.println("ERROR : Type error in calling expression <NB_PARAM>" + lionel_le_boss + "  : " + list);
			Main.add_error_type(new String("ERROR NodeCallFct : Type error in calling expression <NB_PARAM>" + lionel_le_boss + "  : " + list));
		}
		//Prepare to test the type of parameters
		Iterator<Node> l = list.iterator();
		Iterator <Type> t = lionel_le_boss.getParams().iterator();
		while(l.hasNext() && t.hasNext()) {
			NodeExp n = (NodeExp) l.next();
			TypeFeature m = (TypeFeature) t.next();
			//Type Parameters different
			if(m.get(0)!=null && n.getType()!= null && !n.getType().equals(m.get(0))) {
				semanticError(" Type error in calling expression",list);
				System.err.println("ERROR : Type error in calling expression <BAD TYPES PARAMS>" + lionel_le_boss + "  : " + list);
				Main.add_error_type(new String("ERROR NodeCallFct : Type error in calling expression <BAD TYPES PARAMS>" + lionel_le_boss + "  : " + list));
			}
		}
		
		return new NodeCallFct(func, 
				lionel_le_boss, list);
	:}
	;

expression_part=
	/* empty */ 
	| expression_list					
	;

expression_list=
	expression_list.list COMMA expression.e		{: list.add(e); return list; :}
	| expression.e								{: NodeList list = new NodeList(); list.add(e); return list; :}
	;

new_statement=
	NEW variable_access.stm SEMI		
	{:	
		NodeId ID = (NodeId) stm;
		if(ID.getType() instanceof TypePointer)
			return new NodeNew(stm);
		else if ( ID.getType() instanceof TypeNamed) {
			TypeNamed name_type = (TypeNamed) ID.getType();
			if(typeEnvironment.getVariableValue(name_type.get_name()) instanceof TypePointer);
				return new NodeNew(stm);
		}
		
		semanticError(" Type error in pointer access expression ",stm);
		System.err.println("ERROR : Type error in pointer access expression " + stm);
		Main.add_error_type(new String("ERROR NodeNew : Type error in pointer access expression " + stm));
		return new NodeNew(new NodeId("ERROR",new TypeVoid()));
		
	:}
	;

dispose_statement=
	DISPOSE variable_access.stm SEMI	{: 
		NodeId id = (NodeId) stm;
		if(id.getType() instanceof TypePointer)
			return new NodeDispose(stm);
		else
		{
			semanticError(" Type error in pointer access expression ",stm);
			System.err.println("ERROR : Type error in pointer access expression " + stm);
			Main.add_error_type(new String("ERROR NodeDispose : Type error in pointer access expression " + stm));
			return new NodeDispose(new NodeId("ERROR",new TypeVoid()));
		}
		:}
		
	;

print_statement=		
	PRINT expression.e SEMI			
	{: 
		return new NodeCallFct("print",
			new TypeFunct("print",new TypeTuple(new TypeFeature("print",e.getType())),
					new TypeVoid()), new NodeList(e)); 
	:}	
	;
	
println_statement=		
	PRINTLN expression.e SEMI			
	{: 
		return new NodeCallFct("println",
			new TypeFunct("println",new TypeTuple(new TypeFeature("println",e.getType())),
					new TypeVoid()), new NodeList(e)); 
	:}	
	;
	
readln_statement=
	READLN.func expression.e SEMI		
	{: 
		return new NodeCallFct("readln", 
			new TypeFunct("readln",new TypeTuple(new TypeFeature("readln",e.getType())),
					new TypeVoid()), new NodeList(e)); 
	:}
	;
	
return_statement=
	RETURN expression.e SEMI			{: return new NodeReturn(e); :}
	;
	
structured_statement =
	block													
	| if_statement		
	| while_statement								
	| switch_statement
	
	;

if_statement =
	 IF expression.e THEN statement.stm1 ELSE statement.stm2 	{: return new NodeIf(e, stm1, stm2); :}
	|IF expression.e THEN statement.stm							{: return new NodeIf(e, stm); :}
	;

while_statement=
	WHILE expression.e DO statement.stm 							{: return new NodeWhile(e, stm); :}
	;

switch_statement =
	SWITCH expression.e BEGIN case_statement_list.stm END		{: return new NodeSwitch(e, stm); :}
	;
	
case_statement_list=
	case_statement_list.list case_statement.case1 case_default.case2	
	{:
		list.add(case1);
		if(case2!=null) list.add(case2);
		return list; 
	:}
	| case_statement.case1 case_default.case2							
	{: 
		NodeCaseList list = new NodeCaseList(); list.add(case1); 
		if(case2!=null) list.add(case2);															
		return list; 
	:}
	;

case_statement=
	CASE identifier_list.list COLON statement.stm			
	{: 
		NodeList list_2 = new NodeList();
		Iterator<String> it = list.iterator();
		while(it.hasNext()) {
			String x =  it.next();
			list_2.add(new NodeCase(x,stm));
		}
		return list_2; 
	:}
	;
	
case_default = 
	/* empty */
	| DEFAULT COLON statement.stm						{: return new NodeCase(stm); :}
	;

variable_access =
	IDENTIFIER.name											
	{:  
		int x = 0;

		if(stackEnvironment.getVariableValue(name)!=null && stackEnvironment.getVariableValue(name) instanceof TypeItemEnum) {
			x = ((TypeItemEnum)stackEnvironment.getVariableValue(name)).getValue();
			return new NodeId(name,new TypeInt(x));
		}
		else if(stackEnvironment.getVariableValue(name)!=null && stackEnvironment.getVariableValue(name) instanceof TypeNamed) {
			TypeNamed named =  (TypeNamed) stackEnvironment.getVariableValue(name) ;
			return new NodeId(name,typeEnvironment.getVariableValue(named.get_name()));
		}
		
		return new NodeId(name, stackEnvironment.getVariableValue(name));
	:}

	| variable_access.e1 LBRACKET expression.e2 RBRACKET	
	{: 
		NodeId err = null;
		NodeId err_tab= null;
		//Case when it's a malformed expression as z = integer ; a = z[4] except z isn't an array -> error
		if (e1 instanceof NodeId) {
			err_tab = (NodeId) e1;
			if(!(err_tab.getType() instanceof TypeArray)) {
				System.out.println("ERROR TypeArrayRange : Type error in affection  " +e1 + " : " +e2.getType() );
				Main.add_error_type(new String("ERROR TypeArrayRange : Type error in affection , " + err_tab + " isn't an array "));
				return new NodeArrayAccess(new NodeId("ERROR",new TypeArray(new TypeArrayRange(new TypeInt(-1), new TypeInt(-1)),new TypeInt(-1))), e2) ;
			}
		}
		
		if(e2 instanceof NodeId ) {
			err = (NodeId)e2;
			err_tab = (NodeId)e1;
			if(err_tab.getType() instanceof TypeArray) {
				TypeArray t = (TypeArray) err_tab.getType();
				if(typeEnvironment.get_enum_value(err.getName())!=null && !((TypeArrayRange)t.getRangeOREnum()).getFrom_enum()) {
					System.out.println("ERROR TypeArrayRange : Type error in array access " + err.getName() + "  : " + typeEnvironment.get_enum_value(err.getName()) );
					Main.add_error_type(new String("ERROR TypeArrayRange : Type error in array access " + " : " + err.getName()));
					return new NodeArrayAccess(e1, e2) ;
				}
			}
		}
		if (e2 instanceof NodeLiteral) {
			NodeLiteral x = (NodeLiteral)e2;
			if(e1 instanceof NodeId) {
				NodeId y = (NodeId)e1;
				if(y.getType() instanceof TypeArray) {
					Type type1 = x.getType();
					TypeArray type2 = (TypeArray) y.getType();
					if(((TypeArrayRange)type2.getRangeOREnum()).getFrom_enum()) {
						Main.add_error_type(new String("ERROR TypeArrayRange : Type error in array access indice isn't an Enumeration  "+ type2 + " : " + type1));
						return new NodeArrayAccess(e1, e2) ;
					}
	
					if( !(type1.equals(type2.getRangeOREnum().getFirst())))
						Main.add_error_type(new String("ERROR TypeArrayRange : Type error in array access " + type1));
				}
			}
		}
		return new NodeArrayAccess(e1, e2) ; 
	:}
	| expression.e CIRCUMFLEX 	
	{: 
		NodeId ID=null;
		if(e instanceof NodeId) {
			ID = (NodeId) e;
			if(ID.getType() instanceof TypePointer)
				return new NodePtrAccess(e);
			else {
				semanticError(" Type error in pointer access expression ",e);
				System.err.println("ERROR : Type error in pointer access expression " + e);
				Main.add_error_type(new String("ERROR NodePtrAccess : Type error in pointer access expression " + e));
				return new NodePtrAccess(new NodeId("Error",new TypeVoid())); 
			}
		}
		return new NodePtrAccess(e);
	:}
	;

///////////////////////////
////    EXPRESSIONS    ////
///////////////////////////

expression =
	expression.e1 PLUS expression.e2  				
	{: 
		if(e1.getType()!=null && e2.getType()!=null) {
			if(!e1.getType().equals(e2.getType())) {
				Main.add_error_type(new String("ERROR NodeOp : Type error in arithmetic expression"
					+ e1.getType() + " + " + e2.getType()));
			}
		}
		return new NodeOp("+", e1, e2);
	:}

	| expression.e1 MINUS expression.e2 			
	{: 
		if(e1.getType()!=null && e2.getType()!=null) {
			if(!e1.getType().equals(e2.getType())) {
				Main.add_error_type(new String("ERROR NodeOp : Type error in arithmetic expression"
						+ e1.getType() + " - " + e2.getType()));
			}
		}
		return new NodeOp("-", e1, e2);
	:}
	
	| MINUS expression.e @ UNARY_MINUS 				
	{: 
		if(e.getType()!=null) {
			if(!e.getType().equals(new TypeInt())) {
				Main.add_error_type(new String("ERROR NodeOp : Type error in arithmetic expression"
						+ "-" + e.getType()));
			}
		}
		return new NodeOp("-", e);
	:}
	
	| expression.e1 TIMES expression.e2 			
	{:
		if(e1.getType()!=null && e2.getType()!=null) {
			if(!e1.getType().equals(e2.getType())) {
				Main.add_error_type(new String("ERROR NodeOp : Type error in arithmetic expression"
					+ e1.getType() + " * " + e2.getType()));
			}
		}
		return new NodeOp("*", e1, e2);
	:}
	
	| expression.e1 DIV expression.e2
	{:
		if(e1.getType()!=null && e2.getType()!=null) {
			if(!e1.getType().equals(e2.getType())) {
				Main.add_error_type(new String("ERROR NodeOp : Type error in arithmetic expression"
						+ e1.getType() + " / " + e2.getType()));
			}
		}
		return new NodeOp("/", e1, e2);
	:}
	
	| expression.e1 AND expression.e2 				
	{: 
		if(e1.getType()!=null && e2.getType()!=null) {
			if(!e1.getType().equals(e2.getType())) { 
				Main.add_error_type(new String("ERROR NodeRel : Type error in logical expression"
						+ e1.getType() + " && " + e2.getType()));
			}
		}
		return new NodeRel("&&", e1, e2); 
	:}
	
	| expression.e1 OR expression.e2				
	{: 
		if(e1.getType()!=null && e2.getType()!=null) {
			if(!e1.getType().equals(e2.getType())) { 
				Main.add_error_type(new String("ERROR NodeRel : Type error in logical expression"
						+ e1.getType() + " || " + e2.getType()));
			}		
		}
		return new NodeRel("||", e1, e2); 
	:}
	
	| NOT expression.e								
	{:
		if(!e.getType().equals(new TypeBoolean())) {
			Main.add_error_type(new String("ERROR NodeRel : Type error in logical expression"
					+ "!" + e.getType()));
		}
		return new NodeRel("!", e);
	:}
	
	| expression.e1 INFERIOR expression.e2			
	{:
		if(e1.getType()!=null && e2.getType()!=null) {
			if(!e1.getType().equals(e2.getType()) || (e1.getType().equals(new TypeBoolean()) || e2.getType().equals(new TypeBoolean()) ) ) { //OK
				Main.add_error_type(new String("ERROR NodeRel : Type error in comparison"
						+ e1.getType() + " < " + e2.getType()));
			}
		}
		return new NodeRel("<", e1, e2); 
	:}
	
	| expression.e1 INFERIOR_EQ expression.e2		
	{:
		if(e1.getType()!=null && e2.getType()!=null) {
			if(!e1.getType().equals(e2.getType()) || (e1.getType().equals(new TypeBoolean()) || e2.getType().equals(new TypeBoolean()) ) ) { //OK
				Main.add_error_type(new String("ERROR NodeRel : Type error in comparison"
						+ e1.getType() + " <= " + e2.getType()));
			}
		}
		return new NodeRel("<=", e1, e2); 
	:}
	
	| expression.e1 SUPERIOR expression.e2			
	{:
		if(e1.getType()!=null && e2.getType()!=null) { 
			if(!e1.getType().equals(e2.getType()) || (e1.getType().equals(new TypeBoolean()) || e2.getType().equals(new TypeBoolean()) ) ) {
				Main.add_error_type(new String("ERROR NodeRel : Type error in comparison"
					+ e1.getType() + " > " + e2.getType()));
			}
		}												
		return new NodeRel(">", e1, e2); 
	:}
	
	| expression.e1 SUPERIOR_EQ expression.e2		
	{:
		if(e1.getType()!=null && e2.getType()!=null) {
			if(!e1.getType().equals(e2.getType()) || (e1.getType().equals(new TypeBoolean()) || e2.getType().equals(new TypeBoolean()) ) ) { //OK
				Main.add_error_type(new String("ERROR NodeRel : Type error in comparison"
					+ e1.getType() + " >= " + e2.getType()));
			}
		}
		return new NodeRel(">=", e1, e2); 
	:}
	
	| expression.e1 EQUALS expression.e2			
	{: 
		if(e1.getType()!=null && e2.getType()!=null) {
			if(!e1.getType().equals(e2.getType())) { 
				Main.add_error_type(new String("ERROR NodeRel : Type error in comparison"
					+ e1.getType() + " == " + e2.getType()));
			}
		}
		return new NodeRel("==", e1, e2); 
	:}
	
	| expression.e1 DIFF expression.e2			
	{: 
		if(e1.getType()!=null && e2.getType()!=null) { 
			if(!e1.getType().equals(e2.getType())) {
				Main.add_error_type(new String("ERROR NodeRel : Type error in comparison"
					+ e1.getType() + " != " + e2.getType()));
			}
		}
		return new NodeRel("!=", e1, e2); 
	:}
	
	| LPAR expression.e RPAR  						{: return e; :}
	| procedure_expression
	| variable_access
	| literal							
	;

//////////////////////////////////////
////    EXPRESSIONS LITTERALES    ////
//////////////////////////////////////

literal=
	INTEGER_LIT.e	{: return new NodeLiteral(new TypeInt(e), e); :}
	| STRING_LIT.e	{: return new NodeLiteral(new TypeString(), e); :}
	| TRUE			{: return new NodeLiteral(new TypeBoolean(), true); :}
	| FALSE			{: return new NodeLiteral(new TypeBoolean(), false); :}
	| NULL			{: return new NodeLiteral(new TypePointer(), null); :}
	;