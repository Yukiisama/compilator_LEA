%package "ubordeaux.deptinfo.compilation.project.main";
%import "ubordeaux.deptinfo.compilation.project.node.*";
%import "ubordeaux.deptinfo.compilation.project.type.*";
%import "ubordeaux.deptinfo.compilation.project.environment.*";

%class "Parser";

%embed {: 
	static class Events extends beaver.Parser.events {
		public void syntaxError(Symbol token) {
			System.err.format("*** Erreur de syntaxe en ligne %d, colonne %d. Token inattendu: %s\n",
				Symbol.getLine(token.getStart()),
				Symbol.getColumn(token.getStart()),
				Terminals.NAMES[token.getId()]);
		}
	}
	
	public void semanticError(String msg, Symbol token) {
			Systemrr.format("*** " + msg + " ligne %d, colonne %d\n",
				Symbol.getLine(token.getStart()),
				Symbol.getColumn(token.getStart()));
		}
		
	private Environment typeEnvironment = new Environment("types");
	private Environment procedureEnvironment = new Environment("procedures");
	private StackEnvironment stackEnvironment = new StackEnvironment("local variables stack");
	private String type_declaration_name;
	
:};

%init {: 
	report = new MyEvents();
:};


/////////////////////////////////////////
////////////    TERMINALS    ////////////
/////////////////////////////////////////

%terminals BEGIN, END, TYPE, STR, INT, BOOL, DOUBLE_DOT;
%terminals ARRAY, LBRACKET, RBRACKET, OF, CIRCUMFLEX;
%terminals STRUCT, LCURLY_BRACKET, RCURLY_BRACKET, COLON;
%terminals PROCEDURE, FUNCTION, LPAR, RPAR, VAR;
%terminals NEW, DISPOSE, PRINTLN, READLN, RETURN;
%terminals IF, THEN, ELSE, WHILE;
%terminals DO, SWITCH, CASE, DEFAULT;
%terminals PLUS, MINUS, TIMES, DIV;
%terminals OR, AND, INFERIOR, INFERIOR_EQ, SUPERIOR;
%terminals SUPERIOR_EQ, EQUALS, DIFF, TRUE, FALSE, NULL;
%terminals SEMI, EQ, COMMA, NOT;
%terminals INTEGER, STRING, IDENTIFIER;

%right UNARY_MINUS;
%left TIMES, DIV;
%left PLUS, MINUS;

/////////////////////
////   TYPEOF    ////
/////////////////////



%goal program;

///////////////////////////////////////
///////////    PROGRAMME    ///////////
///////////////////////////////////////

program =
	type_declaration_part
	variable_declaration_part
	procedure_definition_part
	BEGIN
	statement_list.stm
	END
	;

////////////////////////////////////////////////
//////    DECLARATION DES TYPES NOMMES    //////
////////////////////////////////////////////////

type_declaration_part =

	|TYPE type_declaration_list
	;

type_declaration_list =
	type_declaration_list  type_declaration
	| type_declaration
	;

type_declaration =
	IDENTIFIER EQ type SEMI
	;

////////////////////////////////////////
//////    DEFINITION DES TYPES    //////
////////////////////////////////////////

type=
	simple_type
	| named_type
	| index_type
	| array_type
	| pointer_type
	| structure_type
	;

simple_type =
	STR
	| INT
	| BOOL
	;

named_type =
	IDENTIFIER
	;

index_type =
	enumerated_type
	| subrange_type
	;

enumerated_type =
	LPAR identifier_list RPAR
	;

subrange_type =
	INTEGER DOUBLE_DOT INTEGER
	| IDENTIFIER DOUBLE_DOT IDENTIFIER
	;

array_type =
	ARRAY LBRACKET range_type RBRACKET OF type
	;

range_type =
	enumerated_type
	| subrange_type
	| named_type
	;

pointer_type =
	CIRCUMFLEX type
	;

structure_type =
	STRUCT LCURLY_BRACKET feature_list_type RCURLY_BRACKET
	;

feature_list_type =
	feature_list_type feature_type
	| feature_type
	;

feature_type =
	IDENTIFIER COLON type SEMI
	;

//////////////////////////////////////////////////////
///////    DECLARATION DES VARIABLES TYPEES    ///////
//////////////////////////////////////////////////////

variable_declaration_part =

	| VAR variable_declaration_list
	;

variable_declaration_list=
	variable_declaration_list variable_declaration
	| variable_declaration
	;

variable_declaration =
	identifier_list COLON type SEMI
	;

identifier_list =
	identifier_list COMMA IDENTIFIER
	| IDENTIFIER
	;

/////////////////////////////////////////////////////////////
//DECLARATION ET DEFINITION DES PROCEDURES ET DES FONCTIONS//
/////////////////////////////////////////////////////////////

procedure_definition_part =
	| procedure_definition_list
	;

procedure_definition_list =
	procedure_definition_list
		procedure_definition
	| procedure_definition
	;

procedure_definition =
	procedure_definition_head block
	| procedure_definition_head SEMI
	;

procedure_definition_head =
	PROCEDURE IDENTIFIER LPAR argt_part RPAR
	| FUNCTION IDENTIFIER LPAR argt_part.args RPAR COLON type
	;

argt_part =

	| argt_list
	;

argt_list =
	argt_list COMMA argt
	| argt
	;

argt =
	IDENTIFIER COLON type
	;

////////////////////////////////////////////
///////////////    BLOCS    ////////////////
////////////////////////////////////////////

block=
	variable_declaration_part
	BEGIN
	statement_list
	END
	;

////////////////////////////
////    INSTRUCTIONS    ////
////////////////////////////

statement_list=
	statement_list  statement
	| statement
	;

statement=
	simple_statement
	| structured_statement
	;

simple_statement=
	assignment_statement
	| procedure_statement
	| new_statement
	| dispose_statement
	| println_statement
	| readln_statement
	| return_statement
	;

assignment_statement=
	variable_access EQ expression SEMI
	;

procedure_statement=
	procedure_expression SEMI
	;

procedure_expression=
	IDENTIFIER LPAR expression_part  RPAR
	;

expression_part=
	| expression_list
	;

expression_list=
	expression_list COMMA expression
	| expression
	;

new_statement=
	NEW variable_access SEMI
	;

dispose_statement=
	DISPOSE variable_access SEMI
	;

println_statement=
	PRINTLN expression SEMI
	;
	
readln_statement=
	READLN expression SEMI
	;
	
return_statement=
	RETURN expression SEMI
	;
	
structured_statement=
	block
	| if_statement
	| while_statement
	| switch_statement
	;
	
if_statement=
	IF expression THEN statement
	| IF expression THEN statement ELSE statement
	;

while_statement=
	WHILE expression DO statement
	;

switch_statement =
	SWITCH expression BEGIN case_statement_list END
	;
	
case_statement_list=
	case_statement_list  case_statement
	| case_statement
	;

case_statement=
	CASE IDENTIFIER COLON statement
	| DEFAULT COLON statement
	;

variable_access=
	IDENTIFIER
	| variable_access LBRACKET expression RBRACKET
	| expression CIRCUMFLEX 	
	;

///////////////////////////
////    expressionS    ////
///////////////////////////

expression =
	expression.e1 PLUS expression.e2  		{: return new Binop(0, e1, e2); :}
	| expression.e1 MINUS expression.e2 	{: return new Binop(1, e1, e2); :}
	| MINUS expression.e @ UNARY_MINUS 		{: return new Binop(e); :}
	| expression.e1 TIMES expression.e2 	{: return new Binop(2, e1, e2); :}
	| expression.e1 DIV expression.e2 		{: return new Binop(3, e1, e2); :}
	| expression.e1 AND expression.e2		{: return new Binop(4, e1, e2); :}
	| expression.e1 OR expression.e2		{: return new Binop(5, e1, e2); :}
	| NOT expression.e
	| expression.e1 INFERIOR expression.e2
	| expression.e1 INFERIOR_EQ expression.e2
	| expression.e1 SUPERIOR expression.e2
	| expression.e1 SUPERIOR_EQ expression.e2
	| expression.e1 EQUALS expression.e2
	| expression.e1 DIFF expression.e2
	| LPAR expression.e RPAR  {: return e; :}
	| procedure_expression
	| variable_access
	| literal
	;

//////////////////////////////////////
////    EXPRESSIONS LITTERALES    ////
//////////////////////////////////////

literal=
	INTEGER
	| STRING
	| TRUE
	| FALSE
	| NULL
	;
